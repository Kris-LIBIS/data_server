- name: 'DirCollector'
  stage: 'Collect'
  class_name: 'Libis::Ingester::DirCollector'
  description: 'Parse a directory tree and collect all files and folders in it.'
  help: "The directory tree at parameter 'location' will be parsed and ingest objects will be created for files and
        folders found. The behaviour can be extensively configured with the parameters:

        All files will be used, unless the 'selection' parameter is filled in. It should contain a regular expression
        and only files that match the expression will be used for FileItem object creation. Files not matching will be
        silently ignored. Similarly, the optional 'ignore' parameter can contain a regular expression that causes the
        files that match to be ignored and only files that do not match will pass the test. Both the file name and the
        file path are tested against the regular expressions. Note that only files are checked against the regular
        expression of the 'selection' parameter, but subdirectories are only checked against the regular expression of
        the 'ignore' parameter. Selection of subdirectories is controlled by the 'subdirs' parameter.

        The parameter 'subdirs' decides how subdirectories are processed. The following values are possible:
        - 'ignore': any subdirectory will be ignored and the task will only process files in the top directory
        - 'recursive': the task will not create an ingest object for the subdirectories, but will parse it contents and
           further process the files and folders in it. This has the same effect as if all files would reside in the same
           top-level directory
        - 'collection': for each subdirectory, a Collection is created and FileItem object representing files in the
           subdirectory will be part of the Collection. The folder structure will be ingested in Rosetta as a collection
           tree
        - 'complex': for each subdirectory encountered a Division object will be created. During the collection phase
           the folder structure will be captured as a tree of Division objects. In the preingest phase the top-level
           Division object will be converted in an IE by the IeBuilder task. The net effect is that for each top-level
           subdirectory an IE will be created and the directory tree below that directory will be captured as a 'complex
           object' in a structmap.
        - 'leaf': as 'complex' above, but only for the leaf directories - a.k.a. directories that do not contain
           any sub-directories - a Division object is created. All files in a leaf directory will be added to the division
           but a file in any other directory will not be added to a division and will result in an individual IE.

        For performance reasons, the collector limits the number of files it can collect. By default this is set to
        5000 as the ingest will start to get exponentially slower with files > 5000. This can be overwritten if
        required with the 'file_limit' parameter.

        By default, this collector will perform a natural sort (https://en.wikipedia.org/wiki/Natural_sort_order) on
        the directory entries found. This behaviour can be turned off by setting the 'sort' parameter to false. Note
        that in that case the entries will be listed in the order as provided by the underlying file system, which may
        be hard to control. If you want the objects ingested in a specific order, consider the DirListCollector task
        instead."
  parameters:
    location:
      data_type: 'string'
      default: '.'
      description: 'Directory to start scanning in.'
      help: 'The directory tree will be parsed and ingest objects will be created for files and folders found.'
    sort:
      data_type: 'bool'
      default: true
      description: 'Sort entries.'
      help: 'If enabled, all files and folders will be sorted with a natural sort algorithm
            (https://en.wikipedia.org/wiki/Natural_sort_order). If disabled the order of the files will depend on the
            sorting of the underlying file system.'
    selection:
      data_type: 'string'
      description: 'Only select files that match the given regular expression. Ignored if empty.'
      help: 'The value of this parameter should be a valid regular expression and will be used to match the file name
            of each file found. If the file name does not match, the file will be ignored.'
    ignore:
      data_type: 'string'
      description: 'File pattern (Regexp) of files and directories that should be ignored.'
      help: 'The value of this parameter should be a valid regular expression and will be used to match the file name or
            directory name. If the name matches, the file or directory will be ignored.'
    subdirs:
      data_type: 'string'
      constraint: 'ignore recursive collection complex leaf'
      default: 'ignore'
      description: 'How to collect subdirs.'
      help: "This parameter controls how subdirectories will be processed:\n
            - 'ignore': no subdirectories processed,\n
            - 'recursive': files will be collected from the folder without adding the folder itself,\n
            - 'collection': like 'recursive' but folders will be turned into collections,\n
            - 'complex': the folder structure will be maintained in the resulting complex IE,\n
            - 'leaf': like 'complex' bout only for leaf directories"
    file_limit:
      data_type: 'integer'
      default: 5000
      description: 'Maximum number of files to collect.'
      help: 'If the number of files found exceeds this limit, the task will fail.'
- name: 'DirListCollector'
  stage: 'Collect'
  class_name: 'Libis::Ingester::DirListCollector'
  description: 'Parse a file and process the entries as listed.'
  help: "This collector is derived from DirCollector and therefore works similarly. These are the differences:

        Files will not be parsed by reading a directory, but by reading the entries in a file. The file should contain
        the file names one per line. No other information should be in this file. As the files will be processed in the
        order they appear in the file, the 'sort' parameter is not used and frozen with false value.

        Subdirectories can be processed too, but they have to be listed in the list file too. The subdirectory should
        contain a list file with the same name if you want to process any files in the subdirectory too. The 'subdirs'
        parameter will be still used the same way as for DirCollector for processing the directory entries.

        Listing files in subdirectories in a parent directory's list file with the relative path, will process the files
        but without creating any hierarchy for the subdirectories and files will be added to the parent directory. You
        may use this feature for detailed control of your final structure, but things may become quite complex."
  parameters:
    location:
      data_type: 'string'
      description: 'Directory to start scanning in.'
      help: 'The directory where the file_list file is located.'
    file_list:
      data_type: 'string'
      default: 'files.list'
      description: 'Name of the file containing the file names'
      help: 'The file should contain the file names one per line. No other information should be in this file. The
            files will be processed in the order they appear in the file. If a subdirectory is listed in the file and
            contains a file with the same name, the directory will be parsed recursively.'
    selection:
      data_type: 'string'
      description: 'Only select files that match the given regular expression. Ignored if empty.'
      help: 'The value of this parameter should be a valid regular expression and will be used to match the file name
            of each file found. If the file name does not match, the file will be ignored.'
    ignore:
      data_type: 'string'
      description: 'File pattern (Regexp) of files and directories that should be ignored.'
      help: 'The value of this parameter should be a valid regular expression and will be used to match the file name or
            directory name. If the name matches, the file or directory will be ignored.'
    subdirs:
      data_type: 'string'
      constraint: 'ignore recursive collection complex leaf'
      default: 'ignore'
      description: 'How to collect subdirs.'
      help: "This parameter controls how subdirectories will be processed:\n
            - 'ignore': no subdirectories processed,\n
            - 'recursive': files will be collected from the folder without adding the folder itself,\n
            - 'collection': like 'recursive' but folders will be turned into collections,\n
            - 'complex': the folder structure will be maintained in the resulting complex IE,\n
            - 'leaf': like 'complex' bout only for leaf directories"
